# Makefile for catdoc testing framework
#
# This file handles automated testing for catdoc, catppt, and xls2csv

# These variables will be set by configure
srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
installroot = @installroot@
bindir = @bindir@

# Set shell to bash to ensure consistent behavior
SHELL = /bin/sh

# Directory for test outputs
TEST_OUTPUT_DIR = test-output

# Tools configuration - reference the installed binaries
DOC_TOOL = $(installroot)$(bindir)/catdoc
PPT_TOOL = $(installroot)$(bindir)/catppt
XLS_TOOL = $(installroot)$(bindir)/xls2csv

# Generic rule to check if tools exist
$(DOC_TOOL) $(PPT_TOOL) $(XLS_TOOL):
	@if [ ! -x "$@" ]; then \
		echo "ERROR: Required tool not found: $@"; \
		echo "Did you run 'make install' first?"; \
		exit 1; \
	fi

# Discover test files
DOC_TESTS = $(wildcard *.doc)
PPT_TESTS = $(wildcard *.ppt)
XLS_TESTS = $(wildcard *.xls)

# Generate output filenames
DOC_OUTPUTS = $(patsubst %.doc,$(TEST_OUTPUT_DIR)/%.doc.out,$(DOC_TESTS))
PPT_OUTPUTS = $(patsubst %.ppt,$(TEST_OUTPUT_DIR)/%.ppt.out,$(PPT_TESTS))
XLS_OUTPUTS = $(patsubst %.xls,$(TEST_OUTPUT_DIR)/%.xls.out,$(XLS_TESTS))

# List of test files that are expected to fail
XFAIL_FILE = xfail.list
XFAIL_TESTS = $(shell if [ -f $(XFAIL_FILE) ]; then cat $(XFAIL_FILE); fi)

# Create test output directory if it doesn't exist
$(TEST_OUTPUT_DIR):
	mkdir -p $(TEST_OUTPUT_DIR)

# Default target
all:

# Test rules for each file type
check-doc: $(DOC_TOOL) $(DOC_OUTPUTS:.out=.result)
check-ppt: $(PPT_TOOL) $(PPT_OUTPUTS:.out=.result)
check-xls: $(XLS_TOOL) $(XLS_OUTPUTS:.out=.result)

# Generic rule to run the appropriate tool and create output file for any test file.
$(TEST_OUTPUT_DIR)/%.out: % | $(TEST_OUTPUT_DIR)
	@case "$<" in \
		*.doc) TOOL=$(DOC_TOOL) ;; \
		*.ppt) TOOL=$(PPT_TOOL) ;; \
		*.xls) TOOL=$(XLS_TOOL) ;; \
		*) echo "Unknown file type for $<"; exit 1 ;; \
	esac; \
	echo "Running $$TOOL on $<"; \
	{ \
		$$TOOL "$<" > "$@" 2> "$@.err"; \
		status=$$?; \
		if [ $$status -ne 0 ]; then \
			echo "FAIL: $<: $$TOOL exited with error status $$status" >> "$@"; \
			echo "warning: $<: $$TOOL exited with error status $$status"; \
			echo "	(see $@.err for stderr)"; \
		fi; \
	}

# Generic rule to create a PASS/FAIL/XFAIL result file and display it for any test file.
$(TEST_OUTPUT_DIR)/%.result: $(TEST_OUTPUT_DIR)/%.out %.expected
	@diff -u $*.expected $< > $@.diff 2>&1; \
	if [ $$? -eq 0 ]; then \
		echo "PASS: $*" > $@; \
		rm $@.diff; \
	else \
		if echo "$(XFAIL_TESTS)" | grep -q "$*"; then \
			echo "XFAIL: $* (expected failure)" > $@; \
		else \
			echo "FAIL: $*" > $@; \
			echo "See $@.diff for details"; \
		fi; \
	fi
	@cat $@

# Run all tests, then display a Test Summary
check: $(TEST_OUTPUT_DIR) check-doc check-ppt check-xls
	@echo "=== Test Summary ==="
	@if ls $(TEST_OUTPUT_DIR)/*.result >/dev/null 2>&1; then \
		pass_count=$$(grep -l 'PASS' $(TEST_OUTPUT_DIR)/*.result 2>/dev/null | wc -l); \
		xfail_count=$$(grep -l 'XFAIL' $(TEST_OUTPUT_DIR)/*.result 2>/dev/null | wc -l); \
		all_fails=$$(grep -l 'FAIL' $(TEST_OUTPUT_DIR)/*.result 2>/dev/null | wc -l); \
		if [ -z "$$all_fails" ]; then all_fails=0; fi; \
		if [ -z "$$xfail_count" ]; then xfail_count=0; fi; \
		unexpected_fails=$$((all_fails - xfail_count)); \
		if [ $$unexpected_fails -lt 0 ]; then unexpected_fails=0; fi; \
		echo "Passed: $$pass_count"; \
		echo "Failed: $$unexpected_fails"; \
		echo "Expected failures: $$xfail_count"; \
		if [ $$unexpected_fails -gt 0 ]; then \
			echo "=== Some tests failed unexpectedly ==="; \
			grep -l 'FAIL' $(TEST_OUTPUT_DIR)/*.result | xargs grep -L 'XFAIL' 2>/dev/null || true; \
			exit 1; \
		else \
			echo "=== All tests passed or failed as expected ==="; \
		fi; \
	else \
		echo "No test results found."; \
	fi

clean:
	rm -f $(TEST_OUTPUT_DIR)/*.*
	-rmdir $(TEST_OUTPUT_DIR)

distclean: clean
	rm -f Makefile

# Handle the standard targets required by autoconf
# This allows "make check" to work properly
.PHONY: all check clean distclean check-doc check-ppt check-xls
